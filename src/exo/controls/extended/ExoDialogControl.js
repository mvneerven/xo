
import ExoBaseControls from '../base';
import Core from '../../../pwa/Core';
import DOM from '../../../pwa/DOM';


class ExoDialogControl extends ExoBaseControls.controls.div.type {
    title = "Dialog";
    _visible = false;
    confirmText = "OK";
    cancelText = "Cancel";
    cancelVisible = false;
    body = "The dialog body";
    modal = false;

    constructor(context) {
        super(context);
        this.acceptProperties("title", "cancelText", "body", "confirmText",
            {
                name: "cancelVisible",
                type: Boolean
            },
            {
                name: "modal",
                type: Boolean
            },
            "click"
        );
        this.id = `dlg_${Core.guid().split('-').pop()}`;
        this.useContainer = false;
    }

    set visible(value) {
        this._visible = value;
        if (this.rendered) {
            if (value) {
                this.show()
            }
            else {
                this.hide();
            }
        }
    }

    handleInteraction(e, confirm) {
        var btn = "cancel", b = e.target;
        if (confirm || b.classList.contains("confirm")) {
            btn = "confirm";
        }

        let isClose = b && b.closest("button") && b.closest("button").classList.contains("dlg-x"); // standard dialog close button

        if (!this.modal || this.isDlgButton(b) || isClose) {
            if (!b.closest(".exf-dlg-b")) {
                this.hide.apply(this, [btn || (isClose ? "cancel" : undefined), e]);
            }
        }
    }

    getTemplate() {
        let bdy = typeof (this.body) === "string" ? this.body : "";
        return /*html*/`<div class="exf-dlg ${this.context.field.class || ""}" role="dialog" id="${this.dlgId}" style="display:none">
        <div class="exf-dlg-c">
            <div class="exf-dlg-h">
                <div class="exf-dlg-t">${this.title}<button type="button" class="dlg-bc dlg-x dismiss" ><span>&times;</span></button></div>
            </div>
        <div class="exf-dlg-b">${bdy}</div>
        <div class="exf-dlg-f">
            <button type="button" class="dlg-x btn exf-btn btn-primary confirm" >${this.confirmText}</button>
            <button type="button" class="dlg-x btn exf-btn btn-default dismiss" >${this.cancelText}</button>
        </div>
        </div>
        </div>`;
    }

    async generateDialog() {
        let body;
        if (typeof (this.body) === "object") { // body element passed

            if (this.body instanceof HTMLElement) {
                body = this.body;
            }
            else {
                body = await xo.form.run(this.body);
            }

            //this.body = "" // clear out standard body
        }
        this.dlg = DOM.parseHTML(this.getTemplate());

        if (body)
            this.dialogBody.appendChild(body);

        this.dlg.classList.add(this.cancelVisible ? "dlg-cv" : "dlg-ch");

        document.body.appendChild(this.dlg);
    }

    get dlgId() {
        return this._dlgId;
    }

    show() {
        const me = this;
        this.generateDialog().then(x => {
            this.dlg.style.display = "block";

            setTimeout(() => {
                document.body.addEventListener("keydown", e => {
                    if (e.keyCode === 27) this.handleInteraction(e);
                    if (e.keyCode === 13) this.handleInteraction(e, true);
                }, {
                    once: true
                });

                me.dlg.querySelector(".dlg-x").addEventListener("click", me.handleInteraction.bind(this));

                me.dlg.addEventListener("click", me.handleInteraction.bind(this));

                if (!me.modal) {
                    document.body.addEventListener("click", me.handleInteraction.bind(this), {
                        once: true
                    })
                }
            }, 100)
        });

    }

    hide(button, e) {
        this.value = button;

        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", true, true);
        this.htmlElement.dispatchEvent(evt);

        if (typeof (this.click) === "function") {
            this.click(button, e)
        }

        this.remove()
    }

    isDlgButton(b) {
        return b.nodeName === "BUTTON" && b.closest(".exf-dlg-f");
    }

    get dialogBody() {
        if (this.dlg) {
            return this.dlg.querySelector(".exf-dlg-b")
        }
    }

    remove() {
        if (this.dlg) {
            this.dlg.remove();
        }
    }

    async render() {
        const me = this;
        await super.render();
        if (this.context.field.demo) {

            this.container.appendChild(await xo.form.run({
                type: "button",
                caption: "Open " + me.caption,
                tooltip: "This is an autogenerated helper button to open the dialog. See documentation for the use of dialogs in ExoForm.F",
                name: "btn_" + this.id,
                click: e => {
                    me.show();
                }
            }))


        }
        return this.container;
    }
}

export default ExoDialogControl;